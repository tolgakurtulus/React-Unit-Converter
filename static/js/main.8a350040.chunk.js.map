{"version":3,"sources":["components/Selectors.js","components/InputField.js","App.js","index.js"],"names":["Selector","props","Grid","item","xs","data","size","FormControl","variant","style","width","InputLabel","label","Select","value","selectedValue","onChange","handleSelector","inputProps","name","populateType","MenuItem","populateWith","map","ele","index","measurements","key","abbr","plural","InputField","TextField","currentValue","handleInput","InputProps","endAdornment","InputAdornment","position","input","App","generateMainSelector","convert","measures","toUpperCase","slice","handleMainSelector","event","preventDefault","setState","mainSelector","target","firstQuantity","secondQuantity","firstInput","secondInput","handleInputFields","flow","handleConversion","state","from","to","console","log","possibilities","Container","container","justify","align","spacing","this","list","firstLabel","secondLabel","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a350040.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nconst Selector = (props) => {\r\n  return (\r\n    <Grid item xs={props.data.size}>\r\n      <FormControl variant=\"outlined\" style={{ width: \"100%\" }}>\r\n        <InputLabel>{props.data.label}</InputLabel>\r\n        <Select\r\n          value={props.data.selectedValue}\r\n          onChange={props.handleSelector}\r\n          inputProps={{ name: props.data.populateType }}\r\n        >\r\n          <MenuItem value=\"\">\r\n            <em>None</em>\r\n          </MenuItem>\r\n          {props.data.populateType === \"mainSelector\"\r\n            ? props.data.populateWith.map((ele, index) => (\r\n                <MenuItem value={props.data.measurements[index]} key={index}>\r\n                  {ele}\r\n                </MenuItem>\r\n              ))\r\n            : props.data.populateWith.map((ele) => (\r\n                <MenuItem value={ele.abbr} key={ele.abbr}>\r\n                  {ele.plural}\r\n                </MenuItem>\r\n              ))}\r\n        </Select>\r\n      </FormControl>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Selector;\r\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst InputField = (props) => {\r\n  return (\r\n    <Grid item xs={6}>\r\n      <TextField\r\n        variant=\"outlined\"\r\n        label={props.data.label}\r\n        value={props.data.currentValue}\r\n        name={props.data.name}\r\n        onChange={props.handleInput}\r\n        InputProps={{\r\n          endAdornment: (\r\n            <InputAdornment position=\"end\">{props.data.input}</InputAdornment>\r\n          ),\r\n        }}\r\n        style={{ width: \"100%\" }}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default InputField;\r\n","import React from 'react';\r\nimport convert from 'convert-units';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Selector from './components/Selectors';\r\nimport InputField from './components/InputField';\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            mainSelector: '',\r\n            firstQuantity: '',\r\n            secondQuantity: '',\r\n            firstInput: 0,\r\n            secondInput: 0,\r\n            flow: ''\r\n        }\r\n    }\r\n\r\n    generateMainSelector = () => {\r\n        return (\r\n            convert().measures()\r\n                .map(ele => ele[0].toUpperCase() + ele.slice(1))\r\n        )\r\n    }\r\n\r\n    handleMainSelector = event => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            mainSelector: event.target.value,\r\n            firstQuantity: '',\r\n            secondQuantity: '',\r\n            firstInput: 0,\r\n            secondInput: 0\r\n        })\r\n    }\r\n\r\n    handleSelector = event => {\r\n        this.setState({[event.target.name]: event.target.value, firstInput: 0, secondInput: 0})\r\n    }\r\n\r\n    handleInputFields = event => {\r\n        event.preventDefault();\r\n        if(event.target.name === 'firstInput') {\r\n            this.setState({\r\n                firstInput: event.target.value,\r\n                flow: 'L2R'\r\n            },\r\n            () => this.handleConversion())\r\n        }\r\n        else if(event.target.name === 'secondInput') {\r\n            this.setState({\r\n                secondInput: event.target.value,\r\n                flow: 'R2L'\r\n            },\r\n            () => this.handleConversion())\r\n        }\r\n    }\r\n\r\n    handleConversion = () => {\r\n        if(this.state.flow === 'L2R') {\r\n            this.setState({\r\n                secondInput: convert(this.state.firstInput).from(this.state.firstQuantity).to(this.state.secondQuantity)\r\n            })\r\n        }\r\n        else if(this.state.flow === 'R2L') {\r\n            this.setState({\r\n                firstInput: convert(this.state.secondInput).from(this.state.secondQuantity).to(this.state.firstQuantity)\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(convert().possibilities())\r\n        return (\r\n            <Container>\r\n                <Grid container justify='center' align='center' spacing={3}>\r\n                    <Selector data={{ size: 12, label: 'Measurement', measurements: convert().measures(), populateType: 'mainSelector', populateWith: this.generateMainSelector(), selectedValue: this.state.mainSelector }} handleSelector={this.handleMainSelector} />\r\n                    {\r\n                        this.state.mainSelector ? (\r\n                            <>\r\n                                <Selector data={{ size: 6, label: 'Quantity', populateType: 'firstQuantity', populateWith: convert().list(this.state.mainSelector), selectedValue: this.state.firstQuantity }} handleSelector={this.handleSelector} />\r\n                                <Selector data={{ size: 6, label: 'Quantity', populateType: 'secondQuantity', populateWith: convert().list(this.state.mainSelector), selectedValue: this.state.secondQuantity }} handleSelector={this.handleSelector} />\r\n                            </>\r\n                        ) :(<></>)\r\n                    }\r\n                    {\r\n                        this.state.firstQuantity && this.state.secondQuantity ? (\r\n                            <>\r\n                                <InputField data={{ currentValue: this.state.firstInput, input: this.state.firstQuantity, label: this.state.firstLabel, name: 'firstInput' }} handleInput={this.handleInputFields} />\r\n                                <InputField data={{ currentValue: this.state.secondInput, input: this.state.secondQuantity, label: this.state.secondLabel, name: 'secondInput' }} handleInput={this.handleInputFields} />\r\n                            </>\r\n                        ) : (<></>)\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}